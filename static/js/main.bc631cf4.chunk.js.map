{"version":3,"sources":["serviceWorker.ts","data-access-layer/api.ts","app/app-reducer.ts","utils/error-utils.ts","features/Todolists/todolist-reducer.ts","features/Todolists/tasks-reducer.ts","features/Login/auth-reducer.ts","app/store.ts","components/AddItemFrom/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","then","response","data","title","post","todolistId","delete","put","tasksAPI","items","taskId","authAPI","appSlice","createSlice","name","initialState","status","error","isInitialized","reducers","setStatusAC","state","action","payload","setAppErrorAC","setAppInitializedAC","actions","appReducer","reducer","handleServerAppError","dispatch","messages","handleNetworkError","message","todosSlice","RemoveTodoListAC","index","findIndex","todo","id","splice","AddTodoListAC","unshift","todolist","filter","entityStatus","ChangeTodoListTitleAC","todolistTitle","ChangeFilterAC","filterValue","setEntityStatusAC","setTodolistsAC","todolists","map","todoListReducer","updateTaskTC","domainModel","getState","a","setEntityTaskStatusAC","taskForUpdate","tasks","find","task","description","priority","startDate","deadline","resultCode","updateTaskAC","tasksSlice","removeTaskAC","todoListId","addTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tl","tasksReducer","authSlice","isLoggedIn","setIsLoggedIn","authReducer","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","concat","thunk","AddItemForm","React","memo","props","useState","setTitle","addTask","addItem","TextField","variant","value","onKeyPress","e","setError","key","onChange","currentTarget","helperText","label","disabled","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeItem","newValue","onDoubleClick","Task","changeTitle","useCallback","changeTaskTitle","className","Completed","Checkbox","checked","newIsDoneValue","New","changeTaskStatus","color","removeTask","Todolist","useDispatch","useEffect","tasksForTodoList","i","onAllClickHandler","changeFilter","onActiveClickHandler","onActiveCompletedHandler","changeTodoListTitle","removeTodoList","Button","size","TodolistsList","useSelector","todoLists","todoListID","deleteTaskTC","text","trim","item","addTodoList","createTodolistTC","changeTodolistTitleTC","newFilterValue","Grid","container","style","padding","spacing","todoList","Paper","elevation","to","Alert","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Copyright","Typography","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","classes","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","catch","resetForm","validate","errors","test","length","Container","component","maxWidth","CssBaseline","Avatar","noValidate","handleSubmit","required","fullWidth","autoComplete","getFieldProps","touched","type","FormControlLabel","control","target","Box","mt","App","appInit","finally","AppBar","position","Toolbar","edge","aria-label","Menu","LinearProgress","fixed","exact","path","render","from","top","textAlign","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.bc631cf4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ab4073b3-e602-4190-9ab5-ec0d40796ddb'\r\n    }\r\n})\r\n\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: null | string\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: null | string\r\n    deadline: null | string\r\n    addedDate: null | string\r\n}\r\n\r\nexport type UpdateTaskBodyType = {\r\n    title: string\r\n    description: null | string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: null | string\r\n    deadline: null | string\r\n}\r\n\r\nexport type UpdateDomainTaskBodyType = {\r\n    title?: string\r\n    description?: null | string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: null | string\r\n    deadline?: null | string\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number,\r\n    error: null | string\r\n}\r\n\r\nexport type CommonResponseType<T> = {\r\n    data: T\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>,\r\n    resultCode: number\r\n}\r\n\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('/todo-lists')\r\n            .then(response => response.data)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistType }>>('/todo-lists', {title})\r\n            .then(response => response.data)\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType<{}>>(`/todo-lists/${todolistId}`)\r\n            .then(response => response.data)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType<{}>>(`/todo-lists/${todolistId}`, {title})\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`/todo-lists/${todolistId}/tasks`)\r\n            .then(response => response.data.items)\r\n    },\r\n    createTask(title: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n            .then(response => response.data)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, data: UpdateTaskBodyType) {\r\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, {...data})\r\n            .then(response => response.data)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType<{}>>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<CommonResponseType<AuthResponseDataType>>('/auth/me')\r\n            .then(response => response.data)\r\n    },\r\n    logIn(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{ userId: number }>>('/auth/login', data)\r\n            .then(response => response.data)\r\n    },\r\n    logOut() {\r\n        return instance.delete<CommonResponseType<{}>>('/auth/login')\r\n            .then(response => response.data)\r\n    }\r\n}","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype AppActionTypes = SetStatusActionType | SetAppErrorActionType | SetAppInitializedActionType\r\n\r\nexport type SetStatusActionType = ReturnType<typeof setStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\n\r\n// export const setStatusAC = (status: RequestStatusType) => ({type: 'APP/SET_STATUS', status} as const)\r\n// export const setAppErrorAC = (error: string | null) => ({type: 'APP/SET_ERROR', error} as const)\r\n// export const setAppInitializedAC = (isInitialized: boolean) => ({\r\n//     type: 'APP/SET_IS_INITIALIZED',\r\n//     isInitialized\r\n// } as const)\r\n\r\n// export const appReducer = (state = initialState, action: AppActionTypes): typeof initialState => {\r\n//     switch (action.type) {\r\n//         case 'APP/SET_STATUS': {\r\n//             return {...state, status: action.status}\r\n//         }\r\n//         case 'APP/SET_ERROR': {\r\n//             return {...state, error: action.error}\r\n//         }\r\n//         case 'APP/SET_IS_INITIALIZED': {\r\n//             return {...state, isInitialized: action.isInitialized}\r\n//         }\r\n//\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    }\r\n})\r\n\r\nexport const {setStatusAC, setAppErrorAC, setAppInitializedAC} = appSlice.actions\r\nexport const appReducer = appSlice.reducer","import {CommonResponseType} from '../data-access-layer/api';\r\nimport {setAppErrorAC, SetAppErrorActionType, setStatusAC, SetStatusActionType} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages[0]) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setStatusAC({status: 'failed'}));\r\n}\r\n\r\nexport const handleNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC({error: error.message}));\r\n    dispatch(setStatusAC({status: 'failed'}));\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetStatusActionType>","import {todolistsAPI, TodolistType} from '../../data-access-layer/api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppThunk} from '../../app/store';\r\nimport {SetStatusActionType, setStatusAC, SetAppErrorActionType, RequestStatusType} from '../../app/app-reducer';\r\nimport {handleNetworkError, handleServerAppError} from '../../utils/error-utils';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType, entityStatus: RequestStatusType }\r\n\r\nexport type RemoveTodoListActionType = ReturnType<typeof RemoveTodoListAC>\r\nexport type AddTodoListActionType = ReturnType<typeof AddTodoListAC>\r\ntype ChangeTodoListTitleActionType = ReturnType<typeof ChangeTodoListTitleAC>\r\ntype ChangeFilterActionType = ReturnType<typeof ChangeFilterAC>\r\ntype SetEntityStatusACActionType = ReturnType<typeof setEntityStatusAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\nexport type TodolistActionsType =\r\n    RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeFilterActionType\r\n    | SetTodolistsActionType\r\n    | SetStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetEntityStatusACActionType\r\n\r\n//thunks\r\nexport const getTodolistsTC = (): AppThunk => async (dispatch: Dispatch<TodolistActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}));\r\n    try {\r\n        let response = await todolistsAPI.getTodolists()\r\n        dispatch(setTodolistsAC({todolists: response}))\r\n        dispatch(setStatusAC({status: 'succeeded'}));\r\n    } catch (error) {\r\n        handleNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const createTodolistTC = (title: string): AppThunk => async (dispatch: Dispatch<TodolistActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}));\r\n    try {\r\n        let response = await todolistsAPI.createTodolist(title)\r\n        if (response.resultCode === 0) {\r\n            dispatch(AddTodoListAC({todolist: response.data.item}))\r\n            dispatch(setStatusAC({status: 'succeeded'}));\r\n        } else {\r\n            handleServerAppError(response, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const deleteTodolistTC = (todolistId: string): AppThunk => async (dispatch: Dispatch<TodolistActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}));\r\n    dispatch(setEntityStatusAC({todolistId, status: 'loading'}))\r\n    try {\r\n        let response = await todolistsAPI.deleteTodolist(todolistId)\r\n        if (response.resultCode === 0) {\r\n            dispatch(RemoveTodoListAC({todolistId}))\r\n            dispatch(setStatusAC({status: 'succeeded'}));\r\n        } else {\r\n            handleServerAppError(response, dispatch);\r\n            dispatch(setEntityStatusAC({todolistId, status: 'failed'}))\r\n        }\r\n    } catch (error) {\r\n        handleNetworkError(error, dispatch);\r\n        dispatch(setEntityStatusAC({todolistId, status: 'failed'}))\r\n    }\r\n}\r\n\r\nexport const changeTodolistTitleTC = (title: string, todolistId: string): AppThunk => async (dispatch: Dispatch<TodolistActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}));\r\n    dispatch(setEntityStatusAC({todolistId, status: 'loading'}))\r\n    try {\r\n        let response = await todolistsAPI.updateTodolist(todolistId, title)\r\n        if (response.resultCode === 0) {\r\n            dispatch(ChangeTodoListTitleAC({todolistTitle: title, todolistId}))\r\n            dispatch(setStatusAC({status: 'succeeded'}));\r\n            dispatch(setEntityStatusAC({todolistId, status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(response, dispatch);\r\n            dispatch(setEntityStatusAC({todolistId, status: 'failed'}))\r\n        }\r\n    } catch (error) {\r\n        handleNetworkError(error, dispatch);\r\n        dispatch(setEntityStatusAC({todolistId, status: 'failed'}))\r\n    }\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst todosSlice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        RemoveTodoListAC: (state, action: PayloadAction<{ todolistId: string }>) => {\r\n            const index = state.findIndex(todo => todo.id === action.payload.todolistId)\r\n            index !== -1 && state.splice(index, 1)\r\n        },\r\n        AddTodoListAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        ChangeTodoListTitleAC: (state, action: PayloadAction<{ todolistTitle: string, todolistId: string }>) => {\r\n            const index = state.findIndex(todo => todo.id === action.payload.todolistId)\r\n            index !== -1 && (state[index].title = action.payload.todolistTitle)\r\n        },\r\n        ChangeFilterAC: (state, action: PayloadAction<{ todolistId: string, filterValue: FilterValuesType }>) => {\r\n            const index = state.findIndex(todo => todo.id === action.payload.todolistId)\r\n            index !== -1 && (state[index].filter = action.payload.filterValue)\r\n        },\r\n        setEntityStatusAC: (state, action: PayloadAction<{ todolistId: string, status: RequestStatusType }>) => {\r\n            const index = state.findIndex(todo => todo.id === action.payload.todolistId)\r\n            index !== -1 && (state[index].entityStatus = action.payload.status)\r\n        },\r\n        setTodolistsAC: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n            return action.payload.todolists.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todoListReducer = todosSlice.reducer\r\nexport const {\r\n    RemoveTodoListAC,\r\n    AddTodoListAC,\r\n    ChangeTodoListTitleAC,\r\n    ChangeFilterAC,\r\n    setEntityStatusAC,\r\n    setTodolistsAC\r\n} = todosSlice.actions","import {\r\n    AddTodoListActionType,\r\n    RemoveTodoListActionType,\r\n    SetTodolistsActionType,\r\n    AddTodoListAC,\r\n    RemoveTodoListAC,\r\n    setTodolistsAC\r\n} from './todolist-reducer';\r\nimport {\r\n    tasksAPI,\r\n    TaskType,\r\n    UpdateDomainTaskBodyType,\r\n    UpdateTaskBodyType\r\n} from '../../data-access-layer/api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType, AppThunk} from '../../app/store';\r\nimport {SetStatusActionType, setStatusAC, SetAppErrorActionType, RequestStatusType} from '../../app/app-reducer';\r\nimport {handleNetworkError, handleServerAppError} from '../../utils/error-utils';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\ntype SetTasksActionType = ReturnType<typeof setTasksAC>\r\ntype UpdateTaskActionType = ReturnType<typeof updateTaskAC>\r\ntype SetEntityTaskStatusACActionType = ReturnType<typeof setEntityTaskStatusAC>\r\n\r\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }\r\n\r\nexport type TasksActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodolistsActionType\r\n    | SetTasksActionType\r\n    | UpdateTaskActionType\r\n    | SetStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetEntityTaskStatusACActionType\r\n\r\n//thunks\r\n\r\nexport const getTasksTC = (todolistId: string): AppThunk => async (dispatch: Dispatch<TasksActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}));\r\n    try {\r\n        let response = await tasksAPI.getTasks(todolistId);\r\n        dispatch(setTasksAC({todolistId, tasks: response}));\r\n        dispatch(setStatusAC({status: 'succeeded'}));\r\n    } catch (error) {\r\n        handleNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string): AppThunk => async (dispatch: Dispatch<TasksActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}));\r\n    dispatch(setEntityTaskStatusAC({todolistId, status: 'loading', taskId}));\r\n    try {\r\n        let response = await tasksAPI.deleteTask(todolistId, taskId)\r\n        if (response.resultCode === 0) {\r\n            dispatch(removeTaskAC({taskId, todoListId: todolistId}));\r\n            dispatch(setStatusAC({status: 'succeeded'}));\r\n        } else {\r\n            handleServerAppError(response, dispatch);\r\n            dispatch(setEntityTaskStatusAC({todolistId, status: 'failed', taskId}));\r\n        }\r\n    } catch (error) {\r\n        handleNetworkError(error, dispatch);\r\n        dispatch(setEntityTaskStatusAC({todolistId, status: 'failed', taskId}));\r\n    }\r\n}\r\n\r\nexport const createTaskTC = (title: string, todolistId: string): AppThunk => async (dispatch: Dispatch<TasksActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}));\r\n    try {\r\n        let response = await tasksAPI.createTask(title, todolistId)\r\n        if (response.resultCode === 0) {\r\n            dispatch(addTaskAC({task: {...response.data.item, entityStatus: 'idle'}}));\r\n            dispatch(setStatusAC({status: 'succeeded'}));\r\n        } else if (response.resultCode === 1) {\r\n            handleServerAppError(response, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskBodyType): AppThunk =>\r\n    async (dispatch: Dispatch<TasksActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setStatusAC({status: 'loading'}));\r\n        dispatch(setEntityTaskStatusAC({todolistId, status: 'loading', taskId}));\r\n        let taskForUpdate = getState().tasks[todolistId].find(task => task.id === taskId)\r\n        if (taskForUpdate) {\r\n            let task: UpdateTaskBodyType = {\r\n                status: taskForUpdate.status,\r\n                description: taskForUpdate.description,\r\n                title: taskForUpdate.title,\r\n                priority: taskForUpdate.priority,\r\n                startDate: taskForUpdate.startDate,\r\n                deadline: taskForUpdate.deadline,\r\n                ...domainModel\r\n            }\r\n            try {\r\n                let response = await tasksAPI.updateTask(todolistId, taskId, task);\r\n                if (response.resultCode === 0) {\r\n                    dispatch(updateTaskAC({id: taskId, domainModel: task, todolistId}));\r\n                    dispatch(setStatusAC({status: 'succeeded'}));\r\n                    dispatch(setEntityTaskStatusAC({todolistId, status: 'succeeded', taskId}));\r\n                } else {\r\n                    handleServerAppError(response, dispatch);\r\n                    dispatch(setEntityTaskStatusAC({todolistId, status: 'failed', taskId}));\r\n                }\r\n            } catch (error) {\r\n                handleNetworkError(error, dispatch);\r\n                dispatch(setEntityTaskStatusAC({todolistId, status: 'failed', taskId}));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\nexport type TaskStateType = {\r\n    [todoListID: string]: Array<TaskDomainType>\r\n}\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todoListId: string }>) => {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            index !== -1 && tasks.splice(index, 1)\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<{ task: TaskDomainType }>) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ id: string, domainModel: UpdateDomainTaskBodyType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.id)\r\n            index !== -1 && (tasks[index] = {...tasks[index], ...action.payload.domainModel})\r\n        },\r\n        setTasksAC: (state, action: PayloadAction<{ todolistId: string, tasks: Array<TaskType> }>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks.map(task => ({...task, entityStatus: 'idle'}))\r\n        },\r\n        setEntityTaskStatusAC: (state, action: PayloadAction<{ todolistId: string, status: RequestStatusType, taskId: string }>) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            index !== -1 && (tasks[index].entityStatus = action.payload.status)\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(AddTodoListAC, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            }\r\n        )\r\n        builder.addCase(RemoveTodoListAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            return action.payload.todolists.forEach(tl => !state[tl.id] && (state[tl.id] = []))\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = tasksSlice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC, setEntityTaskStatusAC} = tasksSlice.actions","import {\r\n    SetAppErrorActionType,\r\n    setAppInitializedAC,\r\n    SetAppInitializedActionType,\r\n    setStatusAC,\r\n    SetStatusActionType\r\n} from '../../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {authAPI, LoginParamsType} from '../../data-access-layer/api';\r\nimport {handleNetworkError, handleServerAppError} from '../../utils/error-utils';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\n// export const setIsLoggedIn = (isLoggedIn: boolean) => ({\r\n//     type: 'login/SET_IS_LOGGED_IN', isLoggedIn\r\n// } as const)\r\n\r\nexport const logInTC = (data: LoginParamsType) => (dispatch: Dispatch<AuthReducerActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}))\r\n    authAPI.logIn(data)\r\n        .then(\r\n            response => {\r\n                if (response.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n                    dispatch(setStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(response, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch(error => handleNetworkError(error, dispatch))\r\n}\r\n\r\nexport const logOutTC = () => (dispatch: Dispatch<AuthReducerActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}))\r\n    authAPI.logOut().then(\r\n        response => {\r\n            if (response.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({isLoggedIn: false}))\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(response, dispatch)\r\n            }\r\n        }\r\n    ).catch(error => handleNetworkError(error, dispatch))\r\n}\r\n\r\nexport const appInitTC = () => (dispatch: Dispatch<AuthReducerActionsType>) => {\r\n    dispatch(setStatusAC({status: 'loading'}))\r\n    authAPI.authMe()\r\n        .then(response => {\r\n                if (response.resultCode === 0) {\r\n                    dispatch(setStatusAC({status: 'succeeded'}))\r\n                    dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n                } else {\r\n                    handleServerAppError(response, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch(error => handleNetworkError(error, dispatch))\r\n        .finally(() => dispatch(setAppInitializedAC({isInitialized: true})))\r\n}\r\n\r\ntype SetIsLoggedInActionType = ReturnType<typeof setIsLoggedIn>\r\n\r\ntype AuthReducerActionsType = SetIsLoggedInActionType\r\n    | SetAppErrorActionType\r\n    | SetStatusActionType\r\n    | SetAppInitializedActionType\r\n\r\n// export const authReducer = (state = initialState, action: AuthReducerActionsType): typeof initialState => {\r\n//     switch (action.type) {\r\n//         case 'login/SET_IS_LOGGED_IN': {\r\n//             return {...state, isLoggedIn: action.isLoggedIn}\r\n//         }\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedIn: (state, action: PayloadAction<{ isLoggedIn: boolean }>) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = authSlice.reducer\r\nexport const {setIsLoggedIn} = authSlice.actions","import {TasksActionsType, tasksReducer} from '../features/Todolists/tasks-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TodolistActionsType, todoListReducer} from '../features/Todolists/todolist-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(thunk)\r\n})\r\n\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppActionsType = TodolistActionsType | TasksActionsType\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {TextField} from '@material-ui/core';\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    error: string | null\r\n    setError: (error: string | null) => void\r\n    disabled ?: boolean\r\n}\r\n\r\nconst AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(' ')\r\n\r\n    function onChangeHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    function onKeyPressHandler(e: KeyboardEvent<HTMLInputElement>) {\r\n        props.setError(null)\r\n        if (e.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    function addTask() {\r\n        props.addItem(title);\r\n        setTitle('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                value={title}\r\n                onKeyPress={onKeyPressHandler}\r\n                onChange={onChangeHandler}\r\n                helperText={!!props.error ? 'Title is required' : ''}\r\n                label={'Title'}\r\n                error={!!props.error}\r\n                disabled={props.disabled}\r\n            />\r\n            {/*<input value={title}*/}\r\n            {/*       onKeyPress={onKeyPressHandler}*/}\r\n            {/*       onChange={onChangeHandler}*/}\r\n            {/*       className={props.error ? 'error' : undefined}/>*/}\r\n            <IconButton disabled={props.disabled} onClick={() => {\r\n                addTask()\r\n            }}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{props.error*/}\r\n            {/*    ? <div className={'error-message'}>{props.error}</div>*/}\r\n            {/*    : null}*/}\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nconst EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => {\r\n        !props.disabled && setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeItem(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newValue = e.currentTarget.value\r\n        setTitle(newValue)\r\n    }\r\n    return (\r\n        // editMode\r\n        //     ? <input value={title}\r\n        //              autoFocus={true}\r\n        //              onBlur={offEditMode}\r\n        //              onChange={changeTitle}/>\r\n        //     : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n        editMode\r\n            ? <TextField value={title}\r\n                         autoFocus={true}\r\n                         onBlur={offEditMode}\r\n                         onChange={changeTitle}\r\n                         variant={'standard'}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n})\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox} from '@material-ui/core';\r\nimport EditableSpan from '../../../../components/EditableSpan/EditableSpan';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {TaskStatuses} from '../../../../data-access-layer/api';\r\nimport {RequestStatusType} from '../../../../app/app-reducer';\r\nimport {TaskDomainType} from '../../tasks-reducer';\r\n\r\nexport type TaskPropsType = {\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todoListID: string) => void\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListID: string) => void\r\n    todolistId: string\r\n    task: TaskDomainType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todolistId)\r\n    }, [props.todolistId, props.changeTaskTitle])\r\n\r\n\r\n    return (<li className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n    >\r\n        <Checkbox checked={props.task.status === TaskStatuses.Completed}\r\n                  onChange={onChangeHandler}\r\n                  color={'secondary'}\r\n                  disabled={props.entityStatus === 'loading'}/>\r\n        {/*<input type=\"checkbox\"*/}\r\n        {/*       checked={task.isDone}*/}\r\n        {/*       onChange={onChangeHandler}*/}\r\n        {/*/>*/}\r\n        {/*<span>{task.title}</span>*/}\r\n        <EditableSpan title={props.task.title}\r\n                      changeItem={changeTitle}\r\n                      disabled={props.entityStatus === 'loading'}/>\r\n        <IconButton onClick={onClickHandler}\r\n                    color=\"default\"\r\n                    disabled={props.entityStatus === 'loading'}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n    </li>)\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from '../../../components/AddItemFrom/AddItemForm';\r\nimport EditableSpan from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses} from '../../../data-access-layer/api';\r\nimport {FilterValuesType} from '../todolist-reducer';\r\nimport {getTasksTC, TaskDomainType} from '../tasks-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {RequestStatusType} from '../../../app/app-reducer';\r\n\r\ntype PropsType = {\r\n    title: string,\r\n    tasks: Array<TaskDomainType>\r\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    addTask: (text: string, todoListID: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todoListID: string) => void\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    error: string | null\r\n    setError: (error: string | null) => void\r\n    filter: FilterValuesType\r\n    id: string\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.id))\r\n    }, [dispatch])\r\n\r\n    let tasksForTodoList = props.tasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(i => i.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(i => i.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const tasks = tasksForTodoList.map(\r\n        task => <Task key={task.id}\r\n                      changeTaskStatus={props.changeTaskStatus}\r\n                      removeTask={props.removeTask}\r\n                      todolistId={props.id}\r\n                      task={task}\r\n                      changeTaskTitle={props.changeTaskTitle}\r\n                      entityStatus={task.entityStatus}\r\n        />\r\n    )\r\n    // const [title, setTitle] = useState<string>(' ')\r\n\r\n    // function addTask() {\r\n    //     props.addTask(title, props.id);\r\n    //     setTitle('')\r\n    // }\r\n\r\n    // function onChangeHandler(e: ChangeEvent<HTMLInputElement>) {\r\n    //     setTitle(e.currentTarget.value)\r\n    // }\r\n    //\r\n    // function onKeyPressHandler(e: KeyboardEvent<HTMLInputElement>) {\r\n    //     props.setError(null)\r\n    //     if (e.key === 'Enter') {\r\n    //         addTask()\r\n    //     }\r\n    // }\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter('all', props.id)\r\n    }, [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter('active', props.id)\r\n    }, [props.id, props.changeFilter])\r\n    const onActiveCompletedHandler = useCallback(() => {\r\n        props.changeFilter('completed', props.id)\r\n    }, [props.id, props.changeFilter])\r\n\r\n    const changeTodoListTitle = useCallback(function (title: string) {\r\n        props.changeTodoListTitle(title, props.id)\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                {/*{props.title}*/}\r\n                <EditableSpan title={props.title}\r\n                              changeItem={changeTodoListTitle}\r\n                              disabled={props.entityStatus === 'loading'}\r\n                />\r\n                <IconButton onClick={() => props.removeTodoList(props.id)}\r\n                            disabled={props.entityStatus === 'loading'}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}\r\n                         error={props.error}\r\n                         setError={props.setError}\r\n                         disabled={props.entityStatus === 'loading'}/>\r\n            {/*<div>*/}\r\n            {/*    <input value={title} onKeyPress={onKeyPressHandler} onChange={onChangeHandler}*/}\r\n            {/*           className={props.error ? 'error' : undefined}/>*/}\r\n            {/*    <button onClick={() => {*/}\r\n            {/*        addTask()*/}\r\n            {/*    }}>+*/}\r\n            {/*    </button>*/}\r\n            {/*    {props.error ? <div className={'error-message'}>{props.error}</div> : null}*/}\r\n            {/*</div>*/}\r\n            <ul>\r\n                {tasks}\r\n\r\n            </ul>\r\n            <div>\r\n                <Button onClick={onAllClickHandler}\r\n                        color={props.filter === 'all' ? 'secondary' : 'default'}\r\n                        variant={'contained'}\r\n                        size={'small'}\r\n                    // className={props.filter === 'all' ? 'active-filter' : ''}\r\n                >All\r\n                </Button>\r\n                <Button onClick={onActiveClickHandler}\r\n                        color={props.filter === 'active' ? 'secondary' : 'default'}\r\n                        variant={'contained'}\r\n                        size={'small'}\r\n                    // className={props.filter === 'active' ? 'active-filter' : ''}\r\n                >Active\r\n                </Button>\r\n                <Button onClick={onActiveCompletedHandler}\r\n                        color={props.filter === 'completed' ? 'secondary' : 'default'}\r\n                        variant={'contained'}\r\n                        size={'small'}\r\n                    // className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {\r\n    ChangeFilterAC,\r\n    changeTodolistTitleTC,\r\n    createTodolistTC,\r\n    deleteTodolistTC,\r\n    FilterValuesType,\r\n    getTodolistsTC,\r\n    TodolistDomainType\r\n} from './todolist-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {createTaskTC, deleteTaskTC, TaskStateType, updateTaskTC} from './tasks-reducer';\r\nimport {TaskStatuses} from '../../data-access-layer/api';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport AddItemForm from '../../components/AddItemFrom/AddItemForm';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\ntype TodolistsListPropsType = {}\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = (props) => {\r\n    let dispatch = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    useEffect(() => {\r\n        dispatch(getTodolistsTC());\r\n    }, [dispatch])\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const removeTask = useCallback(function (taskId: string, todoListID: string) {\r\n        dispatch(deleteTaskTC(todoListID, taskId));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (text: string, todoListID: string) {\r\n        if (text.trim() !== '') {\r\n            dispatch(createTaskTC(text, todoListID))\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback(function (id: string, status: TaskStatuses, todoListID: string) {\r\n        dispatch(updateTaskTC(todoListID, id, {status}))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback(function (todoListID: string) {\r\n        const action = deleteTodolistTC(todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    // let tasksForTodoList = tasks1\r\n    // if (filter === 'active') {\r\n    //     tasksForTodoList = tasks1.filter(t => !t.isDone)\r\n    // }\r\n    // if (filter === 'completed') {\r\n    //     tasksForTodoList = tasks1.filter(t => t.isDone)\r\n    // }\r\n//functions for TodoLists\r\n    const addTodoList = useCallback(function (title: string) {\r\n        const action = createTodolistTC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, title: string, todoListID: string) {\r\n        dispatch(updateTaskTC(todoListID, id, {title}))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback(function (title: string, todoListID: string) {\r\n        dispatch(changeTodolistTitleTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (newFilterValue: FilterValuesType, todoListID: string) {\r\n        dispatch(ChangeFilterAC({todolistId: todoListID, filterValue: newFilterValue}))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (<>\r\n        <Grid container style={{padding: '25px 0'}}>\r\n            <AddItemForm addItem={addTodoList} error={error} setError={setError}/>\r\n        </Grid>\r\n        <Grid container spacing={10}>\r\n            {\r\n                todoLists.map(todoList => {\r\n                    let tasksForTodoList = tasks[todoList.id]\r\n                    return (\r\n                        <Grid item\r\n                              key={todoList.id}>\r\n                            <Paper elevation={10} style={{padding: '15px'}}>\r\n                                <Todolist\r\n                                    title={todoList.title}\r\n                                    tasks={tasksForTodoList}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeTaskStatus}\r\n                                    error={error}\r\n                                    setError={setError}\r\n                                    filter={todoList.filter}\r\n                                    id={todoList.id}\r\n                                    entityStatus={todoList.entityStatus}\r\n                                    removeTodoList={removeTodoList}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodoListTitle={changeTodoListTitle}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>)\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport default function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setAppErrorAC({error: null}));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {\r\n    Avatar, Box, Button,\r\n    Checkbox,\r\n    Container,\r\n    CssBaseline,\r\n    FormControlLabel, Grid, Link,\r\n    makeStyles,\r\n    TextField,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {logInTC} from './auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../app/store';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://github.com/anksuunamun\">\r\n                Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nconst Login: React.FC<any> = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(logInTC(values));\r\n            formik.resetForm();\r\n        },\r\n        validate: (values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 5) {\r\n                errors.password = 'Must be 5 characters or more'\r\n            }\r\n\r\n            return errors;\r\n        })\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form className={classes.form} noValidate onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email ?\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div> : ''}\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password ?\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div> : ''}\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.rememberMe}\r\n                                           {...formik.getFieldProps('rememberMe')}\r\n                                           color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item>\r\n                            <Link href='https://social-network.samuraijs.com/' variant=\"body2\" target={'_blank'}>\r\n                                {'Don\\'t have an account? Sign Up'}\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid style={{marginTop: '20px', color: '#0000008A'}}>\r\n                            <p>You can use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright/>\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Login;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodolistsList} from '../features/Todolists/TodolistsList';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {RequestStatusType} from './app-reducer';\r\nimport ErrorSnackbar from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport Login from '../features/Login/Login';\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport {appInitTC, logOutTC} from '../features/Login/auth-reducer';\r\n\r\n// export type TaskStateType = {\r\n//     [todoListID: string]: Array<TaskType>\r\n// }\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const appInit = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    useEffect(() => {\r\n        dispatch(appInitTC())\r\n    }, [])\r\n\r\n    // const todoListID1 = v1()\r\n    // const todoListID2 = v1()\r\n    // const [todoLists, dispatchToTodolists] = useReducer(todoListReducer, [\r\n    //     {id: todoListID1, title: 'What to learn', filter: 'all'},\r\n    //     {id: todoListID2, title: 'What to buy', filter: 'all'},\r\n    // ])\r\n\r\n    // const [tasks, dispatchToTasks] = useReducer(tasksReducer, {\r\n    //     [todoListID1]: [{title: 'HTML and CSS', isDone: true, id: v1()},\r\n    //         {title: 'JS', isDone: true, id: v1()},\r\n    //         {title: 'ReactJS', isDone: false, id: v1()},\r\n    //         {title: 'ReactJS', isDone: true, id: v1()},],\r\n    //     [todoListID2]: [{title: 'Milk', isDone: true, id: v1()},\r\n    //         {title: 'Eggs', isDone: true, id: v1()},\r\n    //         {title: 'Bread', isDone: false, id: v1()},\r\n    //         {title: 'Meat', isDone: true, id: v1()},],\r\n    // })\r\n\r\n    const onLogoutHandler = () => {\r\n        dispatch(logOutTC());\r\n    }\r\n\r\n    if (!appInit) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\" onClick={onLogoutHandler}>{isLoggedIn ? 'Log out' : 'Log in'}</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <div>Error</div>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport App from './app/App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}